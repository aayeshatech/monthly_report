import streamlit as st
import random
from datetime import date
import pandas as pd

# Constants
NAKSHATRAS = [
    "Ashwini", "Bharani", "Krittika", "Rohini", "Mrigashira", 
    "Ardra", "Punarvasu", "Pushya", "Ashlesha", "Magha", 
    "Purva Phalguni", "Uttara Phalguni", "Hasta", "Chitra", "Swati", 
    "Vishakha", "Anuradha", "Jyeshtha", "Mula", "Purva Ashadha", 
    "Uttara Ashadha", "Shravana", "Dhanishta", "Shatabhisha", "Purva Bhadrapada", 
    "Uttara Bhadrapada", "Revati"
]

ZODIAC_SIGNS = [
    "Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo", 
    "Libra", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces"
]

PLANETS = ["Sun", "Moon", "Mercury", "Venus", "Mars", "Jupiter", "Saturn", "Rahu", "Ketu"]
ASPECTS = ["Conjunction", "Opposition", "Square", "Trine", "Sextile"]

SECTORS = [
    {
        "name": "Banking & Finance",
        "symbols": ["HDFCBANK", "ICICIBANK", "SBIN", "KOTAKBANK", "AXISBANK"],
        "rulingPlanet": "Jupiter"
    },
    {
        "name": "Information Technology",
        "symbols": ["TCS", "INFY", "WIPRO", "HCLTECH", "TECHM"],
        "rulingPlanet": "Mercury"
    },
    {
        "name": "Automobile",
        "symbols": ["MARUTI", "TATAMOTORS", "M&M", "BAJAJ-AUTO", "HEROMOTOCO"],
        "rulingPlanet": "Venus"
    },
    {
        "name": "Energy",
        "symbols": ["RELIANCE", "ONGC", "IOC", "BPCL", "GAIL"],
        "rulingPlanet": "Sun"
    },
    {
        "name": "Pharmaceuticals",
        "symbols": ["SUNPHARMA", "DRREDDY", "CIPLA", "LUPIN", "BIOCON"],
        "rulingPlanet": "Moon"
    },
    {
        "name": "Metals & Mining",
        "symbols": ["TATASTEEL", "JSWSTEEL", "VEDL", "HINDALCO", "NMDC"],
        "rulingPlanet": "Mars"
    },
    {
        "name": "FMCG",
        "symbols": ["HUL", "ITC", "NESTLEIND", "BRITANNIA", "DABUR"],
        "rulingPlanet": "Venus"
    },
    {
        "name": "Infrastructure",
        "symbols": ["LT", "ADANIPORTS", "ULTRACEMCO", "ACC", "AMBUJACEM"],
        "rulingPlanet": "Saturn"
    },
    {
        "name": "Telecom",
        "symbols": ["BHARTIARTL", "VODAFONEIDEA", "TATACOMM"],
        "rulingPlanet": "Rahu"
    },
    {
        "name": "Real Estate",
        "symbols": ["DLF", "SUNTECK", "OBEROIRLTY", "PRESTIGE", "GODREJPROP"],
        "rulingPlanet": "Ketu"
    }
]

COMMODITIES = [
    {
        "name": "Gold",
        "symbol": "GOLD",
        "rulingPlanet": "Sun",
        "global_symbol": "XAUUSD",
        "global_timing": "04:00-23:00"
    },
    {
        "name": "Silver",
        "symbol": "SILVER",
        "rulingPlanet": "Moon",
        "global_symbol": "XAGUSD",
        "global_timing": "04:00-23:00"
    },
    {
        "name": "Crude Oil",
        "symbol": "CRUDEOIL",
        "rulingPlanet": "Mars",
        "global_symbol": "CL1!",
        "global_timing": "04:00-23:00"
    },
    {
        "name": "Bitcoin",
        "symbol": "BTC-USD",
        "rulingPlanet": "Uranus",
        "global_symbol": "BTCUSD",
        "global_timing": "00:00-24:00"
    },
    {
        "name": "Dow Jones",
        "symbol": "DJIA",
        "rulingPlanet": "Jupiter",
        "global_symbol": "YM1!",
        "global_timing": "18:30-01:00"
    },
    {
        "name": "Nasdaq",
        "symbol": "NASDAQ",
        "rulingPlanet": "Mercury",
        "global_symbol": "NQ1!",
        "global_timing": "18:30-01:00"
    },
    {
        "name": "S&P 500",
        "symbol": "SPX",
        "rulingPlanet": "Sun",
        "global_symbol": "ES1!",
        "global_timing": "18:30-01:00"
    }
]

def generate_monthly_report(selected_month, selected_year, report_type, selected_sector=None, selected_symbol=None):
    """Generate monthly astrological trading report"""
    # Set the seed for reproducibility based on month and year
    random.seed(f"{selected_month}{selected_year}")
    
    # Determine number of days in month
    if selected_month == 2:
        num_days = 29 if (selected_year % 4 == 0 and selected_year % 100 != 0) or (selected_year % 400 == 0) else 28
    elif selected_month in [4, 6, 9, 11]:
        num_days = 30
    else:
        num_days = 31
    
    if report_type == "sector":
        # Sector-wise monthly report
        sector = next((s for s in SECTORS if s["name"] == selected_sector), None)
        if not sector:
            return None
            
        report = {
            "type": "sector",
            "month": selected_month,
            "year": selected_year,
            "sector": sector,
            "planetaryTransits": [],
            "keyDates": [],
            "stockRecommendations": []
        }
        
        # Generate planetary transits affecting this sector
        for planet in PLANETS:
            # Skip if planet is not relevant to this sector
            if planet != sector["rulingPlanet"] and random.random() < 0.7:
                continue
                
            transit_days = sorted(random.sample(range(1, num_days+1), random.randint(1, 3)))
            for day in transit_days:
                sign = random.choice(ZODIAC_SIGNS)
                nakshatra = random.choice(NAKSHATRAS)
                aspects = []
                
                # Generate aspects (1-2 per transit)
                for _ in range(random.randint(1, 2)):
                    other_planet = random.choice([p for p in PLANETS if p != planet])
                    aspect_type = random.choice(ASPECTS)
                    aspects.append({
                        "planet": other_planet,
                        "type": aspect_type,
                        "nature": "benefic" if aspect_type in ["Trine", "Sextile"] or other_planet in ["Jupiter", "Venus"] else "malefic"
                    })
                
                report["planetaryTransits"].append({
                    "planet": planet,
                    "day": day,
                    "sign": sign,
                    "nakshatra": nakshatra,
                    "aspects": aspects
                })
        
        # Generate key dates with market impact
        key_days = sorted(random.sample(range(1, num_days+1), random.randint(5, 10)))
        for day in key_days:
            # Find transits affecting this day
            day_transits = [t for t in report["planetaryTransits"] if t["day"] == day]
            
            # Determine market impact
            bullish_factors = sum(
                1 for t in day_transits 
                if any(a["nature"] == "benefic" for a in t["aspects"]) 
                or t["planet"] in ["Jupiter", "Venus"]
            )
            
            bearish_factors = sum(
                1 for t in day_transits 
                if any(a["nature"] == "malefic" for a in t["aspects"]) 
                or t["planet"] in ["Saturn", "Mars", "Rahu", "Ketu"]
            )
            
            if bullish_factors > bearish_factors:
                impact = "bullish"
                action = "Buy"
            elif bearish_factors > bullish_factors:
                impact = "bearish"
                action = "Sell"
            else:
                impact = "neutral"
                action = "Hold"
            
            # Get best time (random for demo)
            best_time = random.choice(["Morning", "Midday", "Afternoon"])
            
            report["keyDates"].append({
                "day": day,
                "impact": impact,
                "action": action,
                "confidence": random.choice(["High", "Medium", "Low"]),
                "bestTime": best_time,
                "transits": [t["planet"] for t in day_transits]
            })
        
        # Generate stock recommendations
        for symbol in sector["symbols"]:
            bullish_days = [d["day"] for d in report["keyDates"] if d["impact"] == "bullish"]
            if not bullish_days:  # Handle case where there are no bullish days
                bullish_days = random.sample(range(1, num_days+1), min(3, num_days))
                
            entry_day = random.choice(bullish_days)
            exit_day = min(entry_day + random.randint(1, 5), num_days)
            
            report["stockRecommendations"].append({
                "symbol": symbol,
                "action": "Buy",
                "entryDay": entry_day,
                "exitDay": exit_day,
                "target": round(random.uniform(3, 8), 2),
                "stoploss": round(random.uniform(1, 3), 2),
                "confidence": random.choice(["High", "Medium", "Low"]),
                "aspects": random.sample([f"{p}-{random.choice(ASPECTS)}" for p in PLANETS], random.randint(1, 2))
            })
    
    else:
        # Symbol-specific monthly report
        if selected_symbol in [s for sector in SECTORS for s in sector["symbols"]]:
            # It's a stock symbol
            sector = next((s for s in SECTORS if selected_symbol in s["symbols"]), None)
            commodity = None
        else:
            # It's a commodity
            commodity = next((c for c in COMMODITIES if c["symbol"] == selected_symbol or c["global_symbol"] == selected_symbol), None)
            sector = None
        
        if not sector and not commodity:
            return None
            
        report = {
            "type": "symbol",
            "month": selected_month,
            "year": selected_year,
            "symbol": selected_symbol,
            "sector": sector["name"] if sector else None,
            "commodity": commodity["name"] if commodity else None,
            "rulingPlanet": sector["rulingPlanet"] if sector else commodity["rulingPlanet"] if commodity else None,
            "keyDates": [],
            "historicalPatterns": []
        }
        
        # Generate key dates with entry/exit signals
        num_signals = random.randint(6, 10)
        signal_days = sorted(random.sample(range(1, num_days+1), num_signals))
        
        for i in range(num_signals):
            day = signal_days[i]
            
            # Determine if this is entry or exit
            if i % 2 == 0:
                signal_type = "Entry"
                action = random.choice(["Buy", "Long"])
                impact = "bullish"
            else:
                signal_type = "Exit"
                action = random.choice(["Sell", "Short", "Book Profit"])
                impact = "bearish"
            
            # Generate planetary aspects
            aspects = []
            num_aspects = random.randint(1, 3)
            for _ in range(num_aspects):
                planet1 = report["rulingPlanet"] if random.random() > 0.5 else random.choice(PLANETS)
                planet2 = random.choice([p for p in PLANETS if p != planet1])
                aspect_type = random.choice(ASPECTS)
                aspects.append(f"{planet1}-{planet2} {aspect_type}")
            
            # Get best time (random for demo)
            best_time = f"{random.randint(9, 15)}:{random.choice(['00', '15', '30', '45'])}"
            
            report["keyDates"].append({
                "day": day,
                "signalType": signal_type,
                "action": action,
                "impact": impact,
                "aspects": aspects,
                "bestTime": best_time,
                "confidence": random.choice(["High", "Medium", "Low"])
            })
        
        # Generate historical patterns (3-5 examples)
        num_patterns = random.randint(3, 5)
        for _ in range(num_patterns):
            # Find similar aspects in history
            if report["keyDates"] and report["keyDates"][0]["aspects"]:
                similar_aspect = random.choice(report["keyDates"][0]["aspects"])
            else:
                similar_aspect = f"{random.choice(PLANETS)}-{random.choice(PLANETS)} {random.choice(ASPECTS)}"
                
            year = selected_year - random.randint(1, 5)
            
            report["historicalPatterns"].append({
                "aspect": similar_aspect,
                "date": f"{random.randint(1, 28)}/{random.randint(1, 12)}/{year}",
                "impact": random.choice(["bullish", "bearish"]),
                "priceChange": round(random.uniform(-10, 10), 2),
                "duration": f"{random.randint(1, 5)} days"
            })
    
    return report

def display_monthly_report():
    st.set_page_config(page_title="Monthly Astro Trading Report", layout="wide")
    
    st.title("📅 Advanced Monthly Astro Trading Report")
    st.markdown("Generate sector-wise or symbol-specific monthly trading reports based on planetary positions and aspects")
    
    col1, col2 = st.columns(2)
    with col1:
        report_type = st.radio("Report Type", ["Sector-wise", "Symbol-specific"], horizontal=True)
    
    col1, col2, col3 = st.columns(3)
    with col1:
        month = st.selectbox("Month", range(1, 13), format_func=lambda x: date(1900, x, 1).strftime('%B'))
    with col2:
        current_year = date.today().year
        year = st.selectbox("Year", range(current_year - 5, current_year + 1))
    
    if report_type == "Sector-wise":
        with col3:
            selected_sector = st.selectbox("Select Sector", [s["name"] for s in SECTORS])
        selected_symbol = None
    else:
        with col3:
            # Combine stock and commodity symbols
            stock_symbols = [s for sector in SECTORS for s in sector["symbols"]]
            commodity_symbols = [c["symbol"] for c in COMMODITIES] + [c["global_symbol"] for c in COMMODITIES]
            all_symbols = sorted(list(set(stock_symbols + commodity_symbols)))  # Remove duplicates
            selected_symbol = st.selectbox("Select Symbol", all_symbols)
        selected_sector = None
    
    if st.button("Generate Monthly Report", type="primary"):
        with st.spinner("Analyzing planetary transits and historical patterns..."):
            report = generate_monthly_report(
                month, year, 
                "sector" if report_type == "Sector-wise" else "symbol",
                selected_sector, selected_symbol
            )
            
            if not report:
                st.error("Could not generate report. Please try different parameters.")
                return
            
            st.success(f"Generated {report_type} Monthly Report for {date(1900, month, 1).strftime('%B')} {year}")
            
            if report_type == "Sector-wise":
                # Sector-wise report display
                st.subheader(f"📊 {selected_sector} Sector Monthly Analysis")
                
                # Summary metrics
                bullish_days = len([d for d in report["keyDates"] if d["impact"] == "bullish"])
                bearish_days = len([d for d in report["keyDates"] if d["impact"] == "bearish"])
                
                col1, col2, col3 = st.columns(3)
                col1.metric("📈 Bullish Days", bullish_days)
                col2.metric("📉 Bearish Days", bearish_days)
                col3.metric("🪐 Ruling Planet", report["sector"]["rulingPlanet"])
                
                # Tabs for different sections
                tab1, tab2, tab3 = st.tabs(["Planetary Transits", "Key Trading Dates", "Stock Recommendations"])
                
                with tab1:
                    st.markdown("""
                        <style>
                            .transit-card {
                                padding: 15px;
                                border-radius: 8px;
                                background-color: #f8f9fa;
                                margin-bottom: 15px;
                                border-left: 4px solid #6c757d;
                            }
                            .transit-card h4 {
                                margin-top: 0;
                                color: #343a40;
                            }
                            .aspect-pill {
                                display: inline-block;
                                padding: 3px 8px;
                                border-radius: 12px;
                                font-size: 0.8em;
                                margin-right: 5px;
                                margin-bottom: 5px;
                                background-color: #e9ecef;
                            }
                            .benefic {
                                border-left: 4px solid #28a745;
                            }
                            .malefic {
                                border-left: 4px solid #dc3545;
                            }
                        </style>
                    """, unsafe_allow_html=True)
                    
                    st.write("### Planetary Transits Affecting This Sector")
                    for transit in sorted(report["planetaryTransits"], key=lambda x: x["day"]):
                        aspects_html = "".join([
                            f"""<span class="aspect-pill {'benefic' if a['nature'] == 'benefic' else 'malefic'}">
                                {transit['planet']}-{a['planet']} {a['type']}
                            </span>""" 
                            for a in transit["aspects"]
                        ])
                        
                        st.markdown(f"""
                            <div class="transit-card {'benefic' if any(a['nature'] == 'benefic' for a in transit['aspects']) else 'malefic'}">
                                <h4>Day {transit['day']}: {transit['planet']} in {transit['sign']} ({transit['nakshatra']})</h4>
                                <div><strong>Aspects:</strong> {aspects_html if aspects_html else 'None'}</div>
                            </div>
                        """, unsafe_allow_html=True)
                
                with tab2:
                    st.write("### Key Trading Dates with Market Impact")
                    
                    # Create a DataFrame for better display
                    df_data = []
                    for day in report["keyDates"]:
                        df_data.append({
                            "Day": day["day"],
                            "Impact": day["impact"].capitalize(),
                            "Action": day["action"],
                            "Confidence": day["confidence"],
                            "Best Time": day["bestTime"],
                            "Active Planets": ", ".join(day["transits"])
                        })
                    
                    df = pd.DataFrame(df_data)
                    
                    # Apply styling
                    def color_impact(val):
                        color = 'green' if val == 'Bullish' else 'red' if val == 'Bearish' else 'gray'
                        return f'color: {color}; font-weight: bold'
                    
                    styled_df = df.style.applymap(color_impact, subset=['Impact'])
                    st.dataframe(styled_df, use_container_width=True, hide_index=True)
                
                with tab3:
                    st.write("### Stock Trading Recommendations")
                    
                    # Create expandable sections for each stock
                    for stock in report["stockRecommendations"]:
                        with st.expander(f"📌 {stock['symbol']}: {stock['action']} on Day {stock['entryDay']}"):
                            col1, col2, col3 = st.columns(3)
                            col1.metric("🎯 Target %", f"+{stock['target']}%")
                            col2.metric("🛑 Stoploss %", f"-{stock['stoploss']}%")
                            col3.metric("🔍 Confidence", stock["confidence"])
                            
                            st.write("**Key Aspects Triggering Trade:**")
                            for aspect in stock["aspects"]:
                                st.write(f"- {aspect}")
                            
                            st.write(f"**Suggested Exit Day:** {stock['exitDay']}")
            
            else:
                # Symbol-specific report display
                st.subheader(f"📈 {selected_symbol} Monthly Trading Analysis")
                
                # Basic info
                col1, col2 = st.columns(2)
                with col1:
                    st.write(f"**Symbol Type:** {'Stock' if report['sector'] else 'Commodity'}")
                    if report['sector']:
                        st.write(f"**Sector:** {report['sector']}")
                    else:
                        st.write(f"**Commodity:** {report['commodity']}")
                
                with col2:
                    st.write(f"**Ruling Planet:** {report['rulingPlanet']}")
                    st.write(f"**Analysis Period:** {date(1900, month, 1).strftime('%B')} {year}")
                
                # Tabs for different sections
                tab1, tab2 = st.tabs(["Trading Signals", "Historical Patterns"])
                
                with tab1:
                    st.write("### Daily Trading Signals")
                    
                    # Create timeline display
                    for day in report["keyDates"]:
                        if day["impact"] == "bullish":
                            border_color = "#28a745"
                            bg_color = "rgba(40, 167, 69, 0.1)"
                        else:
                            border_color = "#dc3545"
                            bg_color = "rgba(220, 53, 69, 0.1)"
                        
                        st.markdown(f"""
                            <div style="padding: 15px; border-radius: 8px; border-left: 4px solid {border_color}; 
                            background-color: {bg_color}; margin-bottom: 15px;">
                                <h4 style="margin-top: 0;">Day {day['day']}: {day['signalType']} Signal ({day['impact']})</h4>
                                <p><strong>Action:</strong> {day['action']} | <strong>Best Time:</strong> {day['bestTime']}</p>
                                <p><strong>Confidence:</strong> <span style="background-color: rgba(0, 0, 0, 0.1); 
                                padding: 2px 8px; border-radius: 4px;">{day['confidence']}</span></p>
                                <p><strong>Key Aspects:</strong></p>
                                <ul>
                                    {"".join([f"<li>{aspect}</li>" for aspect in day['aspects']])}
                                </ul>
                            </div>
                        """, unsafe_allow_html=True)
                
                with tab2:
                    st.write("### Historical Performance During Similar Transits")
                    
                    for pattern in report["historicalPatterns"]:
                        if pattern["priceChange"] > 0:
                            change_color = "#28a745"
                            change_icon = "↑"
                        else:
                            change_color = "#dc3545"
                            change_icon = "↓"
                        
                        st.markdown(f"""
                            <div style="padding: 15px; border-radius: 8px; background-color: #f8f9fa; margin-bottom: 15px;">
                                <h4 style="margin-top: 0;">{pattern['aspect']}</h4>
                                <p><strong>Date:</strong> {pattern['date']} | <strong>Duration:</strong> {pattern['duration']}</p>
                                <p><strong>Price Change:</strong> <span style="color: {change_color}; font-weight: bold;">
                                    {change_icon} {abs(pattern['priceChange'])}%</span></p>
                                <p><strong>Market Impact:</strong> {pattern['impact'].capitalize()}</p>
                            </div>
                        """, unsafe_allow_html=True)

if __name__ == "__main__":
    display_monthly_report()
